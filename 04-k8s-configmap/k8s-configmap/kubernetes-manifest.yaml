# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-configmap
spec:
  selector:
    matchLabels:
      app: k8s-configmap
  template:
    metadata:
      labels:
        app: k8s-configmap
    spec:
      serviceAccountName: default
      containers:
        - name: server
          image: k8s-configmap
          ports:
          - containerPort: 8080
          readinessProbe:
            initialDelaySeconds: 30
            periodSeconds: 15
            httpGet:
              path: "actuator/health"
              port: 8080
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 15
            httpGet:
              path: "actuator/health"
              port: 8080
          env:
          - name: PORT
            value: "8080"
          resources:
            requests:
              cpu: 400m
              memory: 64Mi
            limits:
              cpu: 1500m
              memory: 256Mi
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: k8s-configmap
data:
  test.property: "1"
  management.endpoints.web.exposure.include: "*"
  management.endpoints.web.exposure.exclude: "threaddump,heapdump"
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-configmap
spec:
  type: ClusterIP
  selector:
    app: k8s-configmap
  ports:
  - name: http
    port: 80
    targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-configmap-external
spec:
  type: LoadBalancer
  selector:
    app: k8s-configmap
  ports:
  - name: http
    port: 80
    targetPort: 8080
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: k8s-configmap
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["services", "pods", "configmaps", "endpoints"]
    verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: k8s-configmap
  namespace: default
subjects:
  # You can specify more than one "subject"
  - kind: ServiceAccount
    name: default # "name" is case sensitive
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: ClusterRole #this must be Role or ClusterRole
  name: k8s-configmap  # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io